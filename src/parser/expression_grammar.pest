// Explicit whitespace, used below.
// Pest allows implicit whitespace with WHITESPACE; we don't do that here.
whitespace = _{ " " }
// Shorthand for space between tokens
sp = _{ whitespace* }

// Basic Terminals
identifier = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }
integer    = @{ ASCII_DIGIT+ }

// Basic string literals, does not handle escape sequences for simplicity here.
// String literals are for literal values
string_literal = @{
    "\'" ~  // opening quote
  (("\\" ~ ANY) // Escape sequence
  | (!"\'" ~ ANY) // Any character except the closing quote
  )* // middle
  ~ "\'" // closing quote
}
// Quoted names are for function names or other identifiers that need to be quoted
quoted_name = @{
    "\"" ~  // opening quote
  (("\\" ~ ANY) // Escape sequence
  | (!"\"" ~ ANY) // Any character except the closing quote
  )* // middle
  ~ "\"" // closing quote
}

// A name of a function or table can either be an unquoted identifier or a quoted string
name = { identifier | quoted_name }

// Expression Components
// Field reference
reference = { "$" ~ integer }
// Literal
literal    = { integer | string_literal }
parameters = { "<" ~ name ~ ("," ~ sp ~ name)* ~ ">" }
// TODO: Function Options. Not fully decided on the syntax for this.
// options    = { "[" ~ ??????? ~ "]" }
anchor     = { "#" ~ sp ~ integer }
uri_anchor = { "@" ~ sp ~ integer }

argument_list = { "(" ~ (expression ~ (sp ~ "," ~ sp ~ expression)*)? ~ ")" }

function_call = {
    name ~ sp ~  // Function name
  parameters? ~ sp ~  // Optional parameters, e.g. <T, V>
  // options? ~ sp ~  // Options, e.g. []
  anchor? ~ sp ~  // Optional Anchor, e.g. #1
  uri_anchor? ~ sp ~  // Optional URI Anchor, e.g. @1
  argument_list // Arguments `()` are required, e.g. (1, 2, 3)
}

// Top-level Expression Rule
// Order matters for PEGs: Since an identifer can be a function call, we put that first.
expression = { function_call | reference | literal }

// == Extensions ==
// These rules are for parsing extension declarations, by line.

// -- URI Extension Declaration --
// Format: @anchor: uri_value
// Example: @1: /my/uri1
// `uri_anchor` is defined above as "@" ~ integer.
// `sp` is defined above as whitespace*.

// A URI value can be a sequence of non-whitespace characters
uri_unquoted = @{ (!whitespace ~ ANY)+ }
uri_value    = _{ uri_unquoted }

extension_uri_declaration = { uri_anchor ~ ":" ~ sp ~ uri_value }

// -- Simple Extension Declaration (Function, Type, TypeVariation) --
// Format: #anchor@uri_ref: name
// Example: #10@1: my_func
// `anchor` is defined above as "#" ~ integer.
// `uri_anchor` is defined above as "@" ~ integer.
// `name` is defined above as identifier | quoted_name.
simple_extension = { anchor ~ sp ~ uri_anchor ~ sp ~ ":" ~ sp ~ name }
