// Explicit whitespace, used below.
// Pest allows implicit whitespace with WHITESPACE; we don't do that here.
whitespace = _{ " " }
// Shorthand for optional whitespace between tokens
sp = _{ whitespace* }

// Basic Terminals
identifier = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }
integer    = @{ "-"? ~ ASCII_DIGIT+ }
float      = @{ "-"? ~ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT+ }
boolean    = @{ "true" | "false" }

// Basic string literals, does not handle escape sequences for simplicity here.
// String literals are for literal values
string_literal = @{
    "\'" ~  // opening quote
  (("\\" ~ ANY) // Escape sequence
  | (!"\'" ~ ANY) // Any character except the closing quote
  )* // middle
  ~ "\'" // closing quote
}
// Quoted names are for function names or other identifiers that need to be quoted
quoted_name = @{
    "\"" ~  // opening quote
  (("\\" ~ ANY) // Escape sequence
  | (!"\"" ~ ANY) // Any character except the closing quote
  )* // middle
  ~ "\"" // closing quote
}

// A name of a function or table can either be an unquoted identifier or a quoted string
name = { identifier | quoted_name }

// Expression Components
// Field reference
reference = { "$" ~ integer }
// Literal
literal = { (integer | float | boolean | string_literal) ~ (":" ~ sp ~ type)? }

// -- Components for types and functions
anchor     = { "#" ~ sp ~ integer }
uri_anchor = { "@" ~ sp ~ integer }

parameter = { type | integer | name }

// An arbitrary parameter list for use with type expressions or function calls.
// Example: <T, V>
// 
// Note that if a type can have no parameters, there should be no parameter list.
// A type that can take parameters but has an empty parameter list should be
// written with the empty parameter list.
// 
// As examples: 'i64' and 'struct<>' are valid, but 'i64<>' and 'struct' are not.
parameters = { "<" ~ (parameter ~ ("," ~ sp ~ parameter)*)? ~ ">" }

// Nullability - ? for nullable, nothing for non-nullable. And for unspecified, ⁉.
nullability = { ("?" | "⁉")? }

// -- Type Expressions --
// See <https://substrait.io/types/type_classes/>. These must be lowercase.
simple_type_name = {
    "boolean"
  | "i8"
  | "i16"
  | "i32"
  | "i64"
  | "u8"
  | "u16"
  | "u32"
  | "u64"
  | "fp32"
  | "fp64"
  | "string"
  | "binary"
  | "timestamp_tz"
  | "timestamp"
  | "date"
  | "time"
  | "interval_year"
  | "uuid"
}

// A simple native type expression, composed of a name and optional nullability.
// Examples: i64, bool?, string
simple_type = { simple_type_name ~ nullability }

// -- Compound Types --
// 
// Note that the names here are case-insensitive. In the docs, they are shown as
// upper-case, but I prefer them lowercase...

// A list type expression, composed of a list keyword and a type.
// Example: list<i64>
list_type = { ^"list" ~ nullability ~ "<" ~ type ~ ">" }

// A map type expression, composed of a map keyword and a key type and a value type.
// Example: map<i64, string>
map_type = { ^"map" ~ nullability ~ "<" ~ type ~ "," ~ sp ~ type ~ ">" }

struct_type = { ^"struct" ~ nullability ~ parameters }

// A compound type expression, composed of a name, optional parameters, and optional nullability.
// Example: LIST?<fp64?>, MAP<i64, string>
// TODO: precisiontime types, interval_day
compound_type = { list_type | map_type | struct_type }

// A user-defined type expression.
// 
// Example: point#8@2?<i8>
// 
// - The `u!` prefix is optional.
// - The anchor is optional if the name is unique in the extensions; otherwise,
// required.
// - The URI anchor is optional. Note that this is different from type
// expressions in the YAML, where these do not exist.
// - If the type is nullable, the nullability is required.
// - The parameters are required if they exist for this type.
user_defined_type = {
    "u!"? ~ name ~ anchor? ~ uri_anchor? ~ nullability ~ parameters?
}

// A type expression is a simple type, a compound type, or a user-defined type.
type = { simple_type | compound_type | user_defined_type }

// -- Function Calls --

argument_list = { "(" ~ (expression ~ (sp ~ "," ~ sp ~ expression)*)? ~ ")" }

// Scalar function call:
// - Function name
// - Optional Anchor, e.g. #1
// - Optional URI Anchor, e.g. @1
// - Arguments `()` are required, e.g. (1, 2, 3)
// - Optional output type, e.g. :i64
function_call = {
    name ~ sp ~ anchor? ~ sp ~ uri_anchor? ~ sp ~ argument_list ~ (":" ~ sp ~ type)?
}

// Top-level Expression Rule
// Order matters for PEGs: Since an identifer can be a function call, we put that first.
expression = { function_call | reference | literal }

// == Extensions ==
// These rules are for parsing extension declarations, by line.

// -- URI Extension Declaration --
// Format: @anchor: uri_value
// Example: @1: /my/uri1
// `uri_anchor` is defined above as "@" ~ integer.
// `sp` is defined above as whitespace*.

// A URI value can be a sequence of non-whitespace characters
uri = @{ (!whitespace ~ ANY)+ }

extension_uri_declaration = { uri_anchor ~ ":" ~ sp ~ uri }

// -- Simple Extension Declaration (Function, Type, TypeVariation) --
// Format: #anchor@uri_ref: name
// Example: #10@1: my_func
// `anchor` is defined above as "#" ~ integer.
// `uri_anchor` is defined above as "@" ~ integer.
// `name` is defined above as identifier | quoted_name.
simple_extension = { anchor ~ sp ~ uri_anchor ~ sp ~ ":" ~ sp ~ name }

// == Relations ==
// These rules are for parsing relations - well, for parsing one relation on one line.
// A relation is in the form:
// NAME[parameters => columns]
// 
// Parameters are optional, and are a comma-separated list of expressions.
// Columns are required, and are a comma-separated list of named columns.
// 
// Example:
// 
// name "[" (arguments "=>")? columns "]"
// where:
// - arguments are a comma-separated list of table names or expressions

table_name = { (name ~ ("." ~ name)*) }

named_column      = { name ~ ":" ~ type }
named_column_list = { (named_column ~ ("," ~ sp ~ named_column)*)? }

relation = {
    read_relation
  | filter_relation
  | project_relation
  | aggregate_relation
  | sort_relation
  | fetch_relation
  | join_relation
}

// At the top level, we can have a RelRoot, or a regular relation; both are valid.
top_level_relation = {
    root_relation
  | relation
}

root_relation  = { "Root" ~ "[" ~ root_name_list ~ "]" }
root_name_list = { (name ~ (sp ~ "," ~ sp ~ name)*)? }

read_relation = { "Read" ~ "[" ~ table_name ~ sp ~ "=>" ~ sp ~ named_column_list ~ "]" }

filter_relation = { "Filter" ~ "[" ~ expression ~ sp ~ "=>" ~ sp ~ reference_list ~ "]" }
reference_list  = { (reference ~ (sp ~ "," ~ sp ~ reference)*)? }

project_relation      = { "Project" ~ "[" ~ project_argument_list ~ "]" }
project_argument_list = { (project_argument ~ (sp ~ "," ~ sp ~ project_argument)*)? }
project_argument      = { reference | expression }

// Aggregate relation: groups by specified fields and applies aggregate functions
// Format: Aggregate[group_by_fields => output_items]
// Examples:
// Aggregate[$0 => sum($1), count($1)]  # Group by field 0, output sum and count of field 1
// Aggregate[$0, $1 => $0, sum($2)]     # Group by fields 0,1, output field 0 and sum of field 2
// Aggregate[_ => sum($0), count($1)]   # No grouping (global aggregates)
aggregate_relation    = { "Aggregate" ~ "[" ~ aggregate_group_by ~ sp ~ "=>" ~ sp ~ aggregate_output ~ "]" }
aggregate_group_by    = { empty | (reference ~ (sp ~ "," ~ sp ~ reference)*)? }
aggregate_output      = { (aggregate_output_item ~ (sp ~ "," ~ sp ~ aggregate_output_item)*)? }
aggregate_output_item = { reference | aggregate_measure }
// TODO: Add support for filter, invocation, etc.
aggregate_measure = { function_call }

// Empty grouping symbol
empty = { "_" }

// SortRel: Sort[($0, &AscNullsFirst), ($2, &DescNullsLast) => ...]
sort_relation   = { "Sort" ~ "[" ~ sort_field_list ~ sp ~ "=>" ~ sp ~ reference_list ~ "]" }
sort_field_list = { (sort_field ~ (sp ~ "," ~ sp ~ sort_field)*)? }
sort_field      = { "(" ~ sp ~ reference ~ sp ~ "," ~ sp ~ sort_direction ~ sp ~ ")" }
sort_direction  = { "&AscNullsFirst" | "&AscNullsLast" | "&DescNullsFirst" | "&DescNullsLast" }

// FetchRel: Fetch[limit=..., offset=... => ...] (named arguments only, any order, or _ for empty)
fetch_arg_name       =  { "limit" | "offset" }
fetch_value          =  { integer | expression }
fetch_named_arg      =  { fetch_arg_name ~ sp ~ "=" ~ sp ~ fetch_value }
fetch_named_arg_list =  { fetch_named_arg ~ (sp ~ "," ~ sp ~ fetch_named_arg)* }
fetch_args           = _{ fetch_named_arg_list | empty }
fetch_relation       =  { "Fetch" ~ "[" ~ fetch_args ~ sp ~ "=>" ~ sp ~ reference_list ~ "]" }

// JoinRel: Join[&Inner, eq($0, $2) => $0, $1, $2, $3]
// Note: Longer prefixes must come before shorter ones (e.g., "&LeftSemi" before "&Left")
// so that the parser doesn't match "&Left" when it should match "&LeftSemi"
join_type = { "&Inner" | "&LeftSemi" | "&LeftAnti" | "&LeftSingle" | "&LeftMark" | "&Left" | "&RightSemi" | "&RightAnti" | "&RightSingle" | "&RightMark" | "&Right" | "&Outer" }
join_relation = { "Join" ~ "[" ~ join_type ~ sp ~ "," ~ sp ~ expression ~ sp ~ "=>" ~ sp ~ reference_list ~ "]" }
